spring.application.name=orderServiceFunctions
server.port=8080


# Expose functions over HTTP (Cloud Function Web)
# POST /ingestOrders (accepts JSON array or single JSON)
# POST /reverse
spring.cloud.function.scan.enabled=true
spring.cloud.function.definition=ingestOrders;orders


# === Cloud Stream bindings ===
# producer (function output)
spring.cloud.stream.bindings.ingestOrders-out-0.destination=orders.v1
spring.cloud.stream.bindings.ingestOrders-out-0.contentType=application/json
spring.cloud.stream.bindings.ingestOrders-out-0.producer.requiredGroups=order-processors
spring.cloud.stream.bindings.ingestOrders-out-0.producer.partitionKeyExpression=payload.customerId
spring.cloud.stream.bindings.ingestOrders-out-0.producer.partitionCount=3


# consumer (Kafka -> function input)
spring.cloud.stream.bindings.orders-in-0.destination=orders.v1
spring.cloud.stream.bindings.orders-in-0.group=order-processors
spring.cloud.stream.bindings.orders-in-0.consumer.concurrency=3
spring.cloud.stream.bindings.orders-in-0.consumer.maxAttempts=3
spring.cloud.stream.bindings.orders-in-0.consumer.backOffInitialInterval=1000
spring.cloud.stream.bindings.orders-in-0.consumer.backOffMaxInterval=10000
spring.cloud.stream.bindings.orders-in-0.consumer.backOffMultiplier=2.0


# manual ack with Kafka binder
spring.cloud.stream.kafka.bindings.orders-in-0.consumer.ackMode=MANUAL
spring.cloud.stream.kafka.bindings.orders-in-0.consumer.autoCommitOffset=false
# send failed records to DLT
spring.cloud.stream.kafka.bindings.orders-in-0.consumer.enableDlq=true
spring.cloud.stream.kafka.bindings.orders-in-0.consumer.dlqName=orders.v1.DLT


# Kafka broker
spring.cloud.stream.kafka.binder.brokers=192.168.0.143:9092,192.168.0.143:9093,192.168.0.143:9094
spring.cloud.stream.kafka.binder.configuration.security.protocol=PLAINTEXT



# Producer hardening
spring.cloud.stream.kafka.bindings.ingestOrders-out-0.producer.configuration.acks=all
spring.cloud.stream.kafka.bindings.ingestOrders-out-0.producer.configuration.enable.idempotence=true
spring.cloud.stream.kafka.bindings.ingestOrders-out-0.producer.configuration.max.in.flight.requests.per.connection=1
spring.cloud.stream.kafka.bindings.ingestOrders-out-0.producer.configuration.retries=10


# Transactions (optional but recommended when you read-then-write)
#spring.cloud.stream.kafka.binder.transaction.transactionIdPrefix=tx-order-svc-


# Observability
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.metrics.tags.application=${spring.application.name}


# OpenAPI
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true